/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ContactMessage as PrismaContactMessage } from "@prisma/client";

export class ContactMessageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContactMessageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contactMessage.count(args);
  }

  async contactMessages(
    args: Prisma.ContactMessageFindManyArgs
  ): Promise<PrismaContactMessage[]> {
    return this.prisma.contactMessage.findMany(args);
  }
  async contactMessage(
    args: Prisma.ContactMessageFindUniqueArgs
  ): Promise<PrismaContactMessage | null> {
    return this.prisma.contactMessage.findUnique(args);
  }
  async createContactMessage(
    args: Prisma.ContactMessageCreateArgs
  ): Promise<PrismaContactMessage> {
    return this.prisma.contactMessage.create(args);
  }
  async updateContactMessage(
    args: Prisma.ContactMessageUpdateArgs
  ): Promise<PrismaContactMessage> {
    return this.prisma.contactMessage.update(args);
  }
  async deleteContactMessage(
    args: Prisma.ContactMessageDeleteArgs
  ): Promise<PrismaContactMessage> {
    return this.prisma.contactMessage.delete(args);
  }
}
