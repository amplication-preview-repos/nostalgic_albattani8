/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ContactMessage } from "./ContactMessage";
import { ContactMessageCountArgs } from "./ContactMessageCountArgs";
import { ContactMessageFindManyArgs } from "./ContactMessageFindManyArgs";
import { ContactMessageFindUniqueArgs } from "./ContactMessageFindUniqueArgs";
import { CreateContactMessageArgs } from "./CreateContactMessageArgs";
import { UpdateContactMessageArgs } from "./UpdateContactMessageArgs";
import { DeleteContactMessageArgs } from "./DeleteContactMessageArgs";
import { ContactMessageService } from "../contactMessage.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ContactMessage)
export class ContactMessageResolverBase {
  constructor(
    protected readonly service: ContactMessageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ContactMessage",
    action: "read",
    possession: "any",
  })
  async _contactMessagesMeta(
    @graphql.Args() args: ContactMessageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ContactMessage])
  @nestAccessControl.UseRoles({
    resource: "ContactMessage",
    action: "read",
    possession: "any",
  })
  async contactMessages(
    @graphql.Args() args: ContactMessageFindManyArgs
  ): Promise<ContactMessage[]> {
    return this.service.contactMessages(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ContactMessage, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ContactMessage",
    action: "read",
    possession: "own",
  })
  async contactMessage(
    @graphql.Args() args: ContactMessageFindUniqueArgs
  ): Promise<ContactMessage | null> {
    const result = await this.service.contactMessage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContactMessage)
  @nestAccessControl.UseRoles({
    resource: "ContactMessage",
    action: "create",
    possession: "any",
  })
  async createContactMessage(
    @graphql.Args() args: CreateContactMessageArgs
  ): Promise<ContactMessage> {
    return await this.service.createContactMessage({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContactMessage)
  @nestAccessControl.UseRoles({
    resource: "ContactMessage",
    action: "update",
    possession: "any",
  })
  async updateContactMessage(
    @graphql.Args() args: UpdateContactMessageArgs
  ): Promise<ContactMessage | null> {
    try {
      return await this.service.updateContactMessage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContactMessage)
  @nestAccessControl.UseRoles({
    resource: "ContactMessage",
    action: "delete",
    possession: "any",
  })
  async deleteContactMessage(
    @graphql.Args() args: DeleteContactMessageArgs
  ): Promise<ContactMessage | null> {
    try {
      return await this.service.deleteContactMessage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
